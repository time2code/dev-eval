/* global jest describe beforeEach it expect */

'use strict';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _reactAddons = require('react/addons');

var _reactAddons2 = _interopRequireDefault(_reactAddons);

jest.dontMock('../components/Option');

var TestUtils = _reactAddons2['default'].addons.TestUtils;

// Babel would move an import in front of the jest.dontMock. That's why require
// is used instead of import.
var Option = require('../components/Option');

describe('Option', function () {
  it('should initialise _isHovered & _isDisplayedAsSelected during construction', function () {
    var option = TestUtils.renderIntoDocument(_reactAddons2['default'].createElement(
      Option,
      { value: 'rome' },
      'Rome'
    ));

    expect(option.props._isHovered).toBeFalsy();
    expect(option.props._isDisplayedAsSelected).toBeFalsy();
  });

  it('should show the select style in case _isDisplayedAsSelected is true', function () {
    var option = TestUtils.renderIntoDocument(_reactAddons2['default'].createElement(
      Option,
      { value: 'rome', _isDisplayedAsSelected: true },
      'Rome'
    ));

    var div = TestUtils.findRenderedDOMComponentWithTag(option, 'div');
    expect(div.props.style.padding).toBe(0);
  });

  it('should show the hover style in case _isHovered is true', function () {
    var option = TestUtils.renderIntoDocument(_reactAddons2['default'].createElement(
      Option,
      { value: 'rome', _isHovered: true },
      'Rome'
    ));

    var div = TestUtils.findRenderedDOMComponentWithTag(option, 'div');
    expect(div.props.style.background).toBe('#F5F5F5');
  });

  it('should be able to provide custom properties', function () {
    var option = TestUtils.renderIntoDocument(_reactAddons2['default'].createElement(
      Option,
      { value: 'rome', 'data-custom': 'example' },
      'Rome'
    ));

    var div = TestUtils.findRenderedDOMComponentWithTag(option, 'div');
    expect(div.props['data-custom']).toBe('example');
  });
});